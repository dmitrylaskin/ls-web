const tabs = document.querySelectorAll('.sizes__item-title');

tabs.forEach((tab) => {
    tab.addEventListener('click', function ($event) {
        const parentElement = $event.target.parentElement;
        const descriptionElement = parentElement.querySelector('.sizes__item-description');

        if (descriptionElement.classList.contains('sizes__item-description_active')) {
            descriptionElement.classList.remove('sizes__item-description_active');
        } else {
            descriptionElement.classList.add('sizes__item-description_active');
        }

        document.querySelectorAll('.sizes__item-description').forEach((item) => {
            if (item.parentElement.querySelector('.sizes__item-title').textContent !== $event.target.textContent){
                item.classList.remove('sizes__item-description_active');
            }
        });
    });
})
;const sliderList = document.getElementById('slider-list')
const sliderItem = document.querySelector('.slider__item')
const arrowLeft = document.querySelector('.arrow--left')
const arrowRight = document.querySelector('.arrow--right')
const firstSlideTitle = document.getElementById('first-slide-title')
const secondSlideTitle = document.getElementById('second-slide-title')

document.addEventListener('DOMContentLoaded', () => {
    console.log('page is loaded')})


let sliderStep = 0
let lastSlide = (sliderList.scrollWidth - sliderItem.clientWidth)
lastSlide = -lastSlide


arrowRight.addEventListener('click', () => {

    sliderStep = sliderStep - sliderItem.clientWidth
    if (sliderStep < lastSlide && sliderStep < lastSlide-1) sliderStep = 0
    sliderList.style.transform = `translate(${sliderStep}px)`

})
arrowLeft.addEventListener('click', () => {

    sliderStep = sliderStep + sliderItem.clientWidth
    if (sliderStep > 0) sliderStep = lastSlide
    sliderList.style.transform = `translate(${sliderStep}px)`

})


let burger  = document.querySelector('.burger');
let overlay = document.querySelector('.overlay');
let body = document.querySelector('body');

let links = document.querySelectorAll('.menu__link');

links.forEach(function(element){
    element.addEventListener('click' , toggleMenu);
})

function toggleMenu(){


    burger.classList.toggle('burger--active');
    overlay.classList.toggle('overlay--active');
    body.classList.toggle('body--active-menu');
}

burger.addEventListener('click' , toggleMenu);



const butifySliderTitle = () => {
    if (innerWidth <= 480) {
        firstSlideTitle.innerHTML = 'Батончик<br>“Гранола виноград”'
        secondSlideTitle.innerHTML = 'Батончик<br> “Морские водоросли”'
    }
}
butifySliderTitle()
;let myMap;

const init = () => {
    myMap = new ymaps.Map('map',
        {
            center: [59.941495, 30.321639],
            zoom: 11,
            controls: []
        })

    const coords =[
        [59.94554327989287, 30.38935262114668],
        [59.91142323563909, 30.50024587065841],
        [59.88693161784606, 30.319658102103713],
        [59.97033574821672, 30.315194906302924]
    ]

    const myCollection = new ymaps.GeoObjectCollection({}, {
        draggable: false,
        iconLayout: 'default#image',
        iconImageHref: 'img/icons/marker.svg',
        iconImageSize: [46, 57],
        iconImageOffset: [-35, -52]
    })

    coords.forEach(coord => {
        myCollection.add(new ymaps.Placemark(coord))

        myMap.geoObjects.add(myCollection)
        myMap.behaviors.disable('scrollZoom')
    })
}


ymaps.ready(init);let button = document.getElementById('form-submit')
let modalWindow = document.querySelector('.modal')
let onClose = document.getElementById('modal-close')

let formName = document.forms[0].elements.name
let formPhone = document.forms[0].elements.phone
let textArea = document.getElementById('textArea')
let modalTitle = document.querySelector('.modal__title')


button.addEventListener('click', async (event) => {
    event.preventDefault()

    let fieldValues = [formName, formPhone, textArea]
    fieldValues.forEach(field => fieldValidate(field))

    let errorFields = document.querySelectorAll('.error-field')

    if (errorFields.length === 0) {


        let data = await sendRequest('post','https://webdev-api.loftschool.com/sendmail')

                modalWindow.style.display = 'block'
                body.classList.toggle('body--active-menu');
                modalTitle.classList.remove('modal__title-error')
                modalTitle.textContent = data.message

                if (data.status === 0) {
                    modalTitle.classList.add('modal__title-error')
                }

    }

})
async function sendRequest(method, url, body = null) {
    let response = await fetch(url, {
        method: method,
        body: JSON.stringify({
                    name: formName.value,
                    comment: textArea.value,
                    phone: formPhone.value,
                    to: 'example@mail.no'
                }),
        headers: {'content-type': 'application/json'}
    })
        return response.json()
}

function fieldValidate (fieldName) {
    fieldName.classList.remove('error-field')
    if (fieldName.value.trim() === '') fieldName.classList.add('error-field')
}

onClose.addEventListener('click', (event) => {
    event.preventDefault()

    modalWindow.style.display = 'none'
    body.classList.toggle('body--active-menu');
    document.forms[0].reset()
})
window.onclick = (event) => {
    if (event.target === modalWindow) {
        modalWindow.style.display = 'none'
        body.classList.toggle('body--active-menu');
        console.log(document.forms[0])
        document.forms[0].reset()
    }
}

;const getSizeOfBlock = block => block.height();

const openItem = item => {
  const textBlock = item.find(".team__content-block");
  const reqHeight = getSizeOfBlock(textBlock);
  const textContainer = item.find(".team__content");

  item.addClass("active");
  textContainer.height(reqHeight);
};

const closeEveryItem = container => {
  const items = container.find(".team__item");
  const textBlocks = container.find(".team__content");

  items.removeClass("active");
  textBlocks.height(0);
};

$(".team__item").click(e => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const itemOpened = $this.hasClass("active");
  const container = $this.closest(".team");
  
  if (itemOpened) {
    closeEveryItem(container);
  } else {
    closeEveryItem(container)
    openItem($this);
  }
});
;(function() {
    const section = $('section');
    const content = $('.maincontent');
    const fixedMenu = $('.fixed-menu')
    const fixedMenuItem = $('.fixed-menu__item');
    const sectionActiveClass = 'section--active';
    const fMIActiveClass = 'fixed-menu__item--active';
    const darkThemeClass = 'fixed-menu-shadowed';

    const mobileDetect = new MobileDetect(window.navigator.userAgent);
    const isMobile = mobileDetect.mobile();

    let inScroll = false;

    section.eq(0).addClass(sectionActiveClass);

    const calcSectionPosition = (ndx) => {
        const position = ndx*-100;

        if(isNaN(position)) {
            console.log('передан неверное значение в calcSectionPosition');
            return 0;
        } else {
            return position;
        }
    }

    const changeSidemenuTheme = (ndx) => {
        section.eq(ndx).attr('data-sidemenu-theme') == 'green' ? fixedMenu.addClass(darkThemeClass) : fixedMenu.removeClass(darkThemeClass);
    }

    const findNdxOfActiveEl = (item, activeClass) => {
        return item.filter(`.${activeClass}`).index();
    }

    const resetActiveClassForItem = (item, itemNdx, activeClass) => {
        item.removeClass(activeClass);
        item.eq(itemNdx).addClass(activeClass);
    };

    const changeActiveSection = (ndx) => {
        resetActiveClassForItem(section, ndx, sectionActiveClass);
        resetActiveClassForItem(fixedMenuItem, ndx, fMIActiveClass);
    };


    const moveToSection = ndx => {
        const position = calcSectionPosition(ndx);

        content.css({
            transform: `translateY(${position}%)`
        });

        changeSidemenuTheme(ndx);
    };



    const viewportScroller = () => {

        return {
            next() {
                let ndx = findNdxOfActiveEl(section, sectionActiveClass);
                if (ndx !== section.length-1) {
                    ndx++;
                    inScroll = true;
                    changeActiveSection(ndx);
                    moveToSection(ndx);
                }
            },
            prev() {
                let ndx = findNdxOfActiveEl(section, sectionActiveClass);
                if (ndx !==0) {
                    ndx--;
                    inScroll = true;
                    changeActiveSection(ndx);
                    moveToSection(ndx);
                }
            }
        };
    };

    document.addEventListener('wheel', (e) => {

        const scrollMethods = viewportScroller();

        if (e.deltaY>0 && !inScroll) {
            scrollMethods.next();
        } else if (e.deltaY<0 && !inScroll) {
            scrollMethods.prev();
        }

    })

    $(window).on('keydown', e => {
        const tagName = e.target.tagName.toLowerCase();
        const userTypingInInputs = tagName === 'input' || tagName === 'textarea';
        const scrollMethods = viewportScroller();

        if (userTypingInInputs) return;

        switch(e.keyCode){
            case 38: scrollMethods.prev();
                break;
            case 40: scrollMethods.next();
                break;
        }
    });


    $('[data-scroll-to]').on('click', e => {
        e.preventDefault();

        const $this = $(e.currentTarget);
        const target = $this.attr('data-scroll-to');
        const reqSectionNdx = $(`[data-section-id = ${target}]`).index();
        changeActiveSection(reqSectionNdx);
        moveToSection(reqSectionNdx);
    });

    $(window).on('transitionend',()=> inScroll=false);


    if(isMobile) {
//https://github.com/mattbryson/TouchSwipe-Jquery-Plugin

        $('.wrapper').on('touchmove', e => {e.preventDefault()});

// (passiveSupported && (active || el == window.document || el == window.document.body || el == window)) ? el.addEventListener(name, fn, { passive: false, capture: bubble }) : el.addEventListener(name, fn, bubble || false);

        $("body").swipe( {
            //Generic swipe handler for all directions
            swipe:function(event, direction, distance, duration, fingerCount, fingerData) {
                const scrollMethods = viewportScroller();
                let scrollDirection;

                if (direction === 'down') {scrollDirection = 'prev'; scrollMethods[scrollDirection](); };
                if (direction === 'up') {scrollDirection = 'next'; scrollMethods[scrollDirection](); };
            }
        });
    };


})();const fn = (arg) => {
    return $('.reviews__item').filter((index, item) => {
        return $(item).attr('data-linked-with') === arg
    })
}


$('.interactive-avatar__link').click(event => {
    event.preventDefault()

    const $this = $(event.currentTarget)
    const target = $this.attr('data-open')
    const currentItem = $this.closest('.reviews__switcher-item')
    const itemToShow = fn(target)

    itemToShow.addClass('reviews__item--active').siblings().removeClass('reviews__item--active')
    currentItem.addClass('interactive-avatar--active').siblings().removeClass('interactive-avatar--active')
});let video;
let durationControl;
let soundControl;
let intervalId;
let soundLevel;

$().ready(function () {
    initVars();
    initPlayButtons();
    addListeners();

    durationControl.min = 0;
    durationControl.value = 0;

    soundControl.min = 0;
    soundControl.max = 10;

    soundControl.value = soundControl.max;
});

function addListeners() {
    video.addEventListener('click', playStop);

    durationControl.addEventListener('click', setVideoDuration);
    durationControl.addEventListener('onmousemove', setVideoDuration);
    durationControl.addEventListener('mousedown', stopInterval);
    soundControl.addEventListener('click', changeSoundVolume);
    soundControl.addEventListener('onmousemove', changeSoundVolume);
}

function changeSoundVolume() {
    video.volume = soundControl.value / 10;
}

function stopInterval() {
    clearInterval(intervalId);
}

function setVideoDuration() {
    video.currentTime = durationControl.value;
    intervalId = setInterval(updateDuration, 1000 / 66);
}

function initVars() {
    video = document.getElementById('player');
    durationControl = document.getElementById('durationLevel');
    soundControl = document.getElementById('micLevel');
}

function initPlayButtons() {
    const playButtons = document.querySelectorAll('.play');
    playButtons.forEach(btn => {
        btn.addEventListener('click', playStop);
    });

    const micControl = document.getElementById('mic');
    micControl.addEventListener('click', soundOf);
}

function soundOf() {
    if (video.volume === 0){
        video.volume = soundLevel;
        soundControl.value = soundLevel * 10;
    }else{
        soundLevel = video.volume;
        video.volume = 0;
        soundControl.value = 0;
    }
}

function playStop() {

    $('.video__player-img').toggleClass('video__player-img--active');

    durationControl.max = video.duration;

    if (video.paused) {
        video.play();
        intervalId = setInterval(updateDuration, 1);
    } else {
        video.pause();
        clearInterval(intervalId);
    }
}

function updateDuration() {
    durationControl.value = video.currentTime;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjYy1tZW51LmpzIiwiaW5kZXguanMiLCJtYXAuanMiLCJteUZvcm0uanMiLCJyZXZpZXdzLWFjY28uanMiLCJzd2lwZXIuanMiLCJ0YWJzLmpzIiwidmlkZW8uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0M3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQ3RFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0MvSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0YWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNpemVzX19pdGVtLXRpdGxlJyk7XHJcblxyXG50YWJzLmZvckVhY2goKHRhYikgPT4ge1xyXG4gICAgdGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudEVsZW1lbnQgPSAkZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25FbGVtZW50ID0gcGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuc2l6ZXNfX2l0ZW0tZGVzY3JpcHRpb24nKTtcclxuXHJcbiAgICAgICAgaWYgKGRlc2NyaXB0aW9uRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3NpemVzX19pdGVtLWRlc2NyaXB0aW9uX2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzaXplc19faXRlbS1kZXNjcmlwdGlvbl9hY3RpdmUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2l6ZXNfX2l0ZW0tZGVzY3JpcHRpb25fYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2l6ZXNfX2l0ZW0tZGVzY3JpcHRpb24nKS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnNpemVzX19pdGVtLXRpdGxlJykudGV4dENvbnRlbnQgIT09ICRldmVudC50YXJnZXQudGV4dENvbnRlbnQpe1xyXG4gICAgICAgICAgICAgICAgaXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdzaXplc19faXRlbS1kZXNjcmlwdGlvbl9hY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0pXHJcbiIsImNvbnN0IHNsaWRlckxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2xpZGVyLWxpc3QnKVxyXG5jb25zdCBzbGlkZXJJdGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlcl9faXRlbScpXHJcbmNvbnN0IGFycm93TGVmdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnJvdy0tbGVmdCcpXHJcbmNvbnN0IGFycm93UmlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJyb3ctLXJpZ2h0JylcclxuY29uc3QgZmlyc3RTbGlkZVRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpcnN0LXNsaWRlLXRpdGxlJylcclxuY29uc3Qgc2Vjb25kU2xpZGVUaXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWNvbmQtc2xpZGUtdGl0bGUnKVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdwYWdlIGlzIGxvYWRlZCcpfSlcclxuXHJcblxyXG5sZXQgc2xpZGVyU3RlcCA9IDBcclxubGV0IGxhc3RTbGlkZSA9IChzbGlkZXJMaXN0LnNjcm9sbFdpZHRoIC0gc2xpZGVySXRlbS5jbGllbnRXaWR0aClcclxubGFzdFNsaWRlID0gLWxhc3RTbGlkZVxyXG5cclxuXHJcbmFycm93UmlnaHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcblxyXG4gICAgc2xpZGVyU3RlcCA9IHNsaWRlclN0ZXAgLSBzbGlkZXJJdGVtLmNsaWVudFdpZHRoXHJcbiAgICBpZiAoc2xpZGVyU3RlcCA8IGxhc3RTbGlkZSAmJiBzbGlkZXJTdGVwIDwgbGFzdFNsaWRlLTEpIHNsaWRlclN0ZXAgPSAwXHJcbiAgICBzbGlkZXJMaXN0LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHtzbGlkZXJTdGVwfXB4KWBcclxuXHJcbn0pXHJcbmFycm93TGVmdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuXHJcbiAgICBzbGlkZXJTdGVwID0gc2xpZGVyU3RlcCArIHNsaWRlckl0ZW0uY2xpZW50V2lkdGhcclxuICAgIGlmIChzbGlkZXJTdGVwID4gMCkgc2xpZGVyU3RlcCA9IGxhc3RTbGlkZVxyXG4gICAgc2xpZGVyTGlzdC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7c2xpZGVyU3RlcH1weClgXHJcblxyXG59KVxyXG5cclxuXHJcbmxldCBidXJnZXIgID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ1cmdlcicpO1xyXG5sZXQgb3ZlcmxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdmVybGF5Jyk7XHJcbmxldCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG5cclxubGV0IGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnVfX2xpbmsnKTtcclxuXHJcbmxpbmtzLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCl7XHJcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyAsIHRvZ2dsZU1lbnUpO1xyXG59KVxyXG5cclxuZnVuY3Rpb24gdG9nZ2xlTWVudSgpe1xyXG5cclxuXHJcbiAgICBidXJnZXIuY2xhc3NMaXN0LnRvZ2dsZSgnYnVyZ2VyLS1hY3RpdmUnKTtcclxuICAgIG92ZXJsYXkuY2xhc3NMaXN0LnRvZ2dsZSgnb3ZlcmxheS0tYWN0aXZlJyk7XHJcbiAgICBib2R5LmNsYXNzTGlzdC50b2dnbGUoJ2JvZHktLWFjdGl2ZS1tZW51Jyk7XHJcbn1cclxuXHJcbmJ1cmdlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycgLCB0b2dnbGVNZW51KTtcclxuXHJcblxyXG5cclxuY29uc3QgYnV0aWZ5U2xpZGVyVGl0bGUgPSAoKSA9PiB7XHJcbiAgICBpZiAoaW5uZXJXaWR0aCA8PSA0ODApIHtcclxuICAgICAgICBmaXJzdFNsaWRlVGl0bGUuaW5uZXJIVE1MID0gJ9CR0LDRgtC+0L3Rh9C40Lo8YnI+4oCc0JPRgNCw0L3QvtC70LAg0LLQuNC90L7Qs9GA0LDQtOKAnSdcclxuICAgICAgICBzZWNvbmRTbGlkZVRpdGxlLmlubmVySFRNTCA9ICfQkdCw0YLQvtC90YfQuNC6PGJyPiDigJzQnNC+0YDRgdC60LjQtSDQstC+0LTQvtGA0L7RgdC70LjigJ0nXHJcbiAgICB9XHJcbn1cclxuYnV0aWZ5U2xpZGVyVGl0bGUoKVxyXG4iLCJsZXQgbXlNYXA7XHJcblxyXG5jb25zdCBpbml0ID0gKCkgPT4ge1xyXG4gICAgbXlNYXAgPSBuZXcgeW1hcHMuTWFwKCdtYXAnLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2VudGVyOiBbNTkuOTQxNDk1LCAzMC4zMjE2MzldLFxyXG4gICAgICAgICAgICB6b29tOiAxMSxcclxuICAgICAgICAgICAgY29udHJvbHM6IFtdXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICBjb25zdCBjb29yZHMgPVtcclxuICAgICAgICBbNTkuOTQ1NTQzMjc5ODkyODcsIDMwLjM4OTM1MjYyMTE0NjY4XSxcclxuICAgICAgICBbNTkuOTExNDIzMjM1NjM5MDksIDMwLjUwMDI0NTg3MDY1ODQxXSxcclxuICAgICAgICBbNTkuODg2OTMxNjE3ODQ2MDYsIDMwLjMxOTY1ODEwMjEwMzcxM10sXHJcbiAgICAgICAgWzU5Ljk3MDMzNTc0ODIxNjcyLCAzMC4zMTUxOTQ5MDYzMDI5MjRdXHJcbiAgICBdXHJcblxyXG4gICAgY29uc3QgbXlDb2xsZWN0aW9uID0gbmV3IHltYXBzLkdlb09iamVjdENvbGxlY3Rpb24oe30sIHtcclxuICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxyXG4gICAgICAgIGljb25MYXlvdXQ6ICdkZWZhdWx0I2ltYWdlJyxcclxuICAgICAgICBpY29uSW1hZ2VIcmVmOiAnaW1nL2ljb25zL21hcmtlci5zdmcnLFxyXG4gICAgICAgIGljb25JbWFnZVNpemU6IFs0NiwgNTddLFxyXG4gICAgICAgIGljb25JbWFnZU9mZnNldDogWy0zNSwgLTUyXVxyXG4gICAgfSlcclxuXHJcbiAgICBjb29yZHMuZm9yRWFjaChjb29yZCA9PiB7XHJcbiAgICAgICAgbXlDb2xsZWN0aW9uLmFkZChuZXcgeW1hcHMuUGxhY2VtYXJrKGNvb3JkKSlcclxuXHJcbiAgICAgICAgbXlNYXAuZ2VvT2JqZWN0cy5hZGQobXlDb2xsZWN0aW9uKVxyXG4gICAgICAgIG15TWFwLmJlaGF2aW9ycy5kaXNhYmxlKCdzY3JvbGxab29tJylcclxuICAgIH0pXHJcbn1cclxuXHJcblxyXG55bWFwcy5yZWFkeShpbml0KSIsImxldCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9ybS1zdWJtaXQnKVxyXG5sZXQgbW9kYWxXaW5kb3cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwnKVxyXG5sZXQgb25DbG9zZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbC1jbG9zZScpXHJcblxyXG5sZXQgZm9ybU5hbWUgPSBkb2N1bWVudC5mb3Jtc1swXS5lbGVtZW50cy5uYW1lXHJcbmxldCBmb3JtUGhvbmUgPSBkb2N1bWVudC5mb3Jtc1swXS5lbGVtZW50cy5waG9uZVxyXG5sZXQgdGV4dEFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGV4dEFyZWEnKVxyXG5sZXQgbW9kYWxUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fdGl0bGUnKVxyXG5cclxuXHJcbmJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChldmVudCkgPT4ge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cclxuICAgIGxldCBmaWVsZFZhbHVlcyA9IFtmb3JtTmFtZSwgZm9ybVBob25lLCB0ZXh0QXJlYV1cclxuICAgIGZpZWxkVmFsdWVzLmZvckVhY2goZmllbGQgPT4gZmllbGRWYWxpZGF0ZShmaWVsZCkpXHJcblxyXG4gICAgbGV0IGVycm9yRmllbGRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmVycm9yLWZpZWxkJylcclxuXHJcbiAgICBpZiAoZXJyb3JGaWVsZHMubGVuZ3RoID09PSAwKSB7XHJcblxyXG5cclxuICAgICAgICBsZXQgZGF0YSA9IGF3YWl0IHNlbmRSZXF1ZXN0KCdwb3N0JywnaHR0cHM6Ly93ZWJkZXYtYXBpLmxvZnRzY2hvb2wuY29tL3NlbmRtYWlsJylcclxuXHJcbiAgICAgICAgICAgICAgICBtb2RhbFdpbmRvdy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xyXG4gICAgICAgICAgICAgICAgYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdib2R5LS1hY3RpdmUtbWVudScpO1xyXG4gICAgICAgICAgICAgICAgbW9kYWxUaXRsZS5jbGFzc0xpc3QucmVtb3ZlKCdtb2RhbF9fdGl0bGUtZXJyb3InKVxyXG4gICAgICAgICAgICAgICAgbW9kYWxUaXRsZS50ZXh0Q29udGVudCA9IGRhdGEubWVzc2FnZVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsVGl0bGUuY2xhc3NMaXN0LmFkZCgnbW9kYWxfX3RpdGxlLWVycm9yJylcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59KVxyXG5hc3luYyBmdW5jdGlvbiBzZW5kUmVxdWVzdChtZXRob2QsIHVybCwgYm9keSA9IG51bGwpIHtcclxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBmb3JtTmFtZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb21tZW50OiB0ZXh0QXJlYS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBwaG9uZTogZm9ybVBob25lLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvOiAnZXhhbXBsZUBtYWlsLm5vJ1xyXG4gICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgaGVhZGVyczogeydjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9XHJcbiAgICB9KVxyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKClcclxufVxyXG5cclxuZnVuY3Rpb24gZmllbGRWYWxpZGF0ZSAoZmllbGROYW1lKSB7XHJcbiAgICBmaWVsZE5hbWUuY2xhc3NMaXN0LnJlbW92ZSgnZXJyb3ItZmllbGQnKVxyXG4gICAgaWYgKGZpZWxkTmFtZS52YWx1ZS50cmltKCkgPT09ICcnKSBmaWVsZE5hbWUuY2xhc3NMaXN0LmFkZCgnZXJyb3ItZmllbGQnKVxyXG59XHJcblxyXG5vbkNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcblxyXG4gICAgbW9kYWxXaW5kb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdib2R5LS1hY3RpdmUtbWVudScpO1xyXG4gICAgZG9jdW1lbnQuZm9ybXNbMF0ucmVzZXQoKVxyXG59KVxyXG53aW5kb3cub25jbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbW9kYWxXaW5kb3cpIHtcclxuICAgICAgICBtb2RhbFdpbmRvdy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXHJcbiAgICAgICAgYm9keS5jbGFzc0xpc3QudG9nZ2xlKCdib2R5LS1hY3RpdmUtbWVudScpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGRvY3VtZW50LmZvcm1zWzBdKVxyXG4gICAgICAgIGRvY3VtZW50LmZvcm1zWzBdLnJlc2V0KClcclxuICAgIH1cclxufVxyXG5cclxuIiwiY29uc3QgZ2V0U2l6ZU9mQmxvY2sgPSBibG9jayA9PiBibG9jay5oZWlnaHQoKTtcblxuY29uc3Qgb3Blbkl0ZW0gPSBpdGVtID0+IHtcbiAgY29uc3QgdGV4dEJsb2NrID0gaXRlbS5maW5kKFwiLnRlYW1fX2NvbnRlbnQtYmxvY2tcIik7XG4gIGNvbnN0IHJlcUhlaWdodCA9IGdldFNpemVPZkJsb2NrKHRleHRCbG9jayk7XG4gIGNvbnN0IHRleHRDb250YWluZXIgPSBpdGVtLmZpbmQoXCIudGVhbV9fY29udGVudFwiKTtcblxuICBpdGVtLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xuICB0ZXh0Q29udGFpbmVyLmhlaWdodChyZXFIZWlnaHQpO1xufTtcblxuY29uc3QgY2xvc2VFdmVyeUl0ZW0gPSBjb250YWluZXIgPT4ge1xuICBjb25zdCBpdGVtcyA9IGNvbnRhaW5lci5maW5kKFwiLnRlYW1fX2l0ZW1cIik7XG4gIGNvbnN0IHRleHRCbG9ja3MgPSBjb250YWluZXIuZmluZChcIi50ZWFtX19jb250ZW50XCIpO1xuXG4gIGl0ZW1zLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICB0ZXh0QmxvY2tzLmhlaWdodCgwKTtcbn07XG5cbiQoXCIudGVhbV9faXRlbVwiKS5jbGljayhlID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIGNvbnN0ICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICBjb25zdCBpdGVtT3BlbmVkID0gJHRoaXMuaGFzQ2xhc3MoXCJhY3RpdmVcIik7XG4gIGNvbnN0IGNvbnRhaW5lciA9ICR0aGlzLmNsb3Nlc3QoXCIudGVhbVwiKTtcbiAgXG4gIGlmIChpdGVtT3BlbmVkKSB7XG4gICAgY2xvc2VFdmVyeUl0ZW0oY29udGFpbmVyKTtcbiAgfSBlbHNlIHtcbiAgICBjbG9zZUV2ZXJ5SXRlbShjb250YWluZXIpXG4gICAgb3Blbkl0ZW0oJHRoaXMpO1xuICB9XG59KTtcbiIsIihmdW5jdGlvbigpIHtcclxuICAgIGNvbnN0IHNlY3Rpb24gPSAkKCdzZWN0aW9uJyk7XHJcbiAgICBjb25zdCBjb250ZW50ID0gJCgnLm1haW5jb250ZW50Jyk7XHJcbiAgICBjb25zdCBmaXhlZE1lbnUgPSAkKCcuZml4ZWQtbWVudScpXHJcbiAgICBjb25zdCBmaXhlZE1lbnVJdGVtID0gJCgnLmZpeGVkLW1lbnVfX2l0ZW0nKTtcclxuICAgIGNvbnN0IHNlY3Rpb25BY3RpdmVDbGFzcyA9ICdzZWN0aW9uLS1hY3RpdmUnO1xyXG4gICAgY29uc3QgZk1JQWN0aXZlQ2xhc3MgPSAnZml4ZWQtbWVudV9faXRlbS0tYWN0aXZlJztcclxuICAgIGNvbnN0IGRhcmtUaGVtZUNsYXNzID0gJ2ZpeGVkLW1lbnUtc2hhZG93ZWQnO1xyXG5cclxuICAgIGNvbnN0IG1vYmlsZURldGVjdCA9IG5ldyBNb2JpbGVEZXRlY3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgY29uc3QgaXNNb2JpbGUgPSBtb2JpbGVEZXRlY3QubW9iaWxlKCk7XHJcblxyXG4gICAgbGV0IGluU2Nyb2xsID0gZmFsc2U7XHJcblxyXG4gICAgc2VjdGlvbi5lcSgwKS5hZGRDbGFzcyhzZWN0aW9uQWN0aXZlQ2xhc3MpO1xyXG5cclxuICAgIGNvbnN0IGNhbGNTZWN0aW9uUG9zaXRpb24gPSAobmR4KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBuZHgqLTEwMDtcclxuXHJcbiAgICAgICAgaWYoaXNOYU4ocG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCfQv9C10YDQtdC00LDQvSDQvdC10LLQtdGA0L3QvtC1INC30L3QsNGH0LXQvdC40LUg0LIgY2FsY1NlY3Rpb25Qb3NpdGlvbicpO1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNoYW5nZVNpZGVtZW51VGhlbWUgPSAobmR4KSA9PiB7XHJcbiAgICAgICAgc2VjdGlvbi5lcShuZHgpLmF0dHIoJ2RhdGEtc2lkZW1lbnUtdGhlbWUnKSA9PSAnZ3JlZW4nID8gZml4ZWRNZW51LmFkZENsYXNzKGRhcmtUaGVtZUNsYXNzKSA6IGZpeGVkTWVudS5yZW1vdmVDbGFzcyhkYXJrVGhlbWVDbGFzcyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZmluZE5keE9mQWN0aXZlRWwgPSAoaXRlbSwgYWN0aXZlQ2xhc3MpID0+IHtcclxuICAgICAgICByZXR1cm4gaXRlbS5maWx0ZXIoYC4ke2FjdGl2ZUNsYXNzfWApLmluZGV4KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVzZXRBY3RpdmVDbGFzc0Zvckl0ZW0gPSAoaXRlbSwgaXRlbU5keCwgYWN0aXZlQ2xhc3MpID0+IHtcclxuICAgICAgICBpdGVtLnJlbW92ZUNsYXNzKGFjdGl2ZUNsYXNzKTtcclxuICAgICAgICBpdGVtLmVxKGl0ZW1OZHgpLmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgY2hhbmdlQWN0aXZlU2VjdGlvbiA9IChuZHgpID0+IHtcclxuICAgICAgICByZXNldEFjdGl2ZUNsYXNzRm9ySXRlbShzZWN0aW9uLCBuZHgsIHNlY3Rpb25BY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgcmVzZXRBY3RpdmVDbGFzc0Zvckl0ZW0oZml4ZWRNZW51SXRlbSwgbmR4LCBmTUlBY3RpdmVDbGFzcyk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBjb25zdCBtb3ZlVG9TZWN0aW9uID0gbmR4ID0+IHtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGNhbGNTZWN0aW9uUG9zaXRpb24obmR4KTtcclxuXHJcbiAgICAgICAgY29udGVudC5jc3Moe1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVZKCR7cG9zaXRpb259JSlgXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNoYW5nZVNpZGVtZW51VGhlbWUobmR4KTtcclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICBjb25zdCB2aWV3cG9ydFNjcm9sbGVyID0gKCkgPT4ge1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZXh0KCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5keCA9IGZpbmROZHhPZkFjdGl2ZUVsKHNlY3Rpb24sIHNlY3Rpb25BY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmR4ICE9PSBzZWN0aW9uLmxlbmd0aC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmR4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5TY3JvbGwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZUFjdGl2ZVNlY3Rpb24obmR4KTtcclxuICAgICAgICAgICAgICAgICAgICBtb3ZlVG9TZWN0aW9uKG5keCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByZXYoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmR4ID0gZmluZE5keE9mQWN0aXZlRWwoc2VjdGlvbiwgc2VjdGlvbkFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZHggIT09MCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5keC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIGluU2Nyb2xsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VBY3RpdmVTZWN0aW9uKG5keCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVRvU2VjdGlvbihuZHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCAoZSkgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBzY3JvbGxNZXRob2RzID0gdmlld3BvcnRTY3JvbGxlcigpO1xyXG5cclxuICAgICAgICBpZiAoZS5kZWx0YVk+MCAmJiAhaW5TY3JvbGwpIHtcclxuICAgICAgICAgICAgc2Nyb2xsTWV0aG9kcy5uZXh0KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlLmRlbHRhWTwwICYmICFpblNjcm9sbCkge1xyXG4gICAgICAgICAgICBzY3JvbGxNZXRob2RzLnByZXYoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfSlcclxuXHJcbiAgICAkKHdpbmRvdykub24oJ2tleWRvd24nLCBlID0+IHtcclxuICAgICAgICBjb25zdCB0YWdOYW1lID0gZS50YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGNvbnN0IHVzZXJUeXBpbmdJbklucHV0cyA9IHRhZ05hbWUgPT09ICdpbnB1dCcgfHwgdGFnTmFtZSA9PT0gJ3RleHRhcmVhJztcclxuICAgICAgICBjb25zdCBzY3JvbGxNZXRob2RzID0gdmlld3BvcnRTY3JvbGxlcigpO1xyXG5cclxuICAgICAgICBpZiAodXNlclR5cGluZ0luSW5wdXRzKSByZXR1cm47XHJcblxyXG4gICAgICAgIHN3aXRjaChlLmtleUNvZGUpe1xyXG4gICAgICAgICAgICBjYXNlIDM4OiBzY3JvbGxNZXRob2RzLnByZXYoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDQwOiBzY3JvbGxNZXRob2RzLm5leHQoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAkKCdbZGF0YS1zY3JvbGwtdG9dJykub24oJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBjb25zdCAkdGhpcyA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSAkdGhpcy5hdHRyKCdkYXRhLXNjcm9sbC10bycpO1xyXG4gICAgICAgIGNvbnN0IHJlcVNlY3Rpb25OZHggPSAkKGBbZGF0YS1zZWN0aW9uLWlkID0gJHt0YXJnZXR9XWApLmluZGV4KCk7XHJcbiAgICAgICAgY2hhbmdlQWN0aXZlU2VjdGlvbihyZXFTZWN0aW9uTmR4KTtcclxuICAgICAgICBtb3ZlVG9TZWN0aW9uKHJlcVNlY3Rpb25OZHgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJCh3aW5kb3cpLm9uKCd0cmFuc2l0aW9uZW5kJywoKT0+IGluU2Nyb2xsPWZhbHNlKTtcclxuXHJcblxyXG4gICAgaWYoaXNNb2JpbGUpIHtcclxuLy9odHRwczovL2dpdGh1Yi5jb20vbWF0dGJyeXNvbi9Ub3VjaFN3aXBlLUpxdWVyeS1QbHVnaW5cclxuXHJcbiAgICAgICAgJCgnLndyYXBwZXInKS5vbigndG91Y2htb3ZlJywgZSA9PiB7ZS5wcmV2ZW50RGVmYXVsdCgpfSk7XHJcblxyXG4vLyAocGFzc2l2ZVN1cHBvcnRlZCAmJiAoYWN0aXZlIHx8IGVsID09IHdpbmRvdy5kb2N1bWVudCB8fCBlbCA9PSB3aW5kb3cuZG9jdW1lbnQuYm9keSB8fCBlbCA9PSB3aW5kb3cpKSA/IGVsLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZm4sIHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGJ1YmJsZSB9KSA6IGVsLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZm4sIGJ1YmJsZSB8fCBmYWxzZSk7XHJcblxyXG4gICAgICAgICQoXCJib2R5XCIpLnN3aXBlKCB7XHJcbiAgICAgICAgICAgIC8vR2VuZXJpYyBzd2lwZSBoYW5kbGVyIGZvciBhbGwgZGlyZWN0aW9uc1xyXG4gICAgICAgICAgICBzd2lwZTpmdW5jdGlvbihldmVudCwgZGlyZWN0aW9uLCBkaXN0YW5jZSwgZHVyYXRpb24sIGZpbmdlckNvdW50LCBmaW5nZXJEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JvbGxNZXRob2RzID0gdmlld3BvcnRTY3JvbGxlcigpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNjcm9sbERpcmVjdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAnZG93bicpIHtzY3JvbGxEaXJlY3Rpb24gPSAncHJldic7IHNjcm9sbE1ldGhvZHNbc2Nyb2xsRGlyZWN0aW9uXSgpOyB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge3Njcm9sbERpcmVjdGlvbiA9ICduZXh0Jzsgc2Nyb2xsTWV0aG9kc1tzY3JvbGxEaXJlY3Rpb25dKCk7IH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG5cclxufSkoKSIsImNvbnN0IGZuID0gKGFyZykgPT4ge1xyXG4gICAgcmV0dXJuICQoJy5yZXZpZXdzX19pdGVtJykuZmlsdGVyKChpbmRleCwgaXRlbSkgPT4ge1xyXG4gICAgICAgIHJldHVybiAkKGl0ZW0pLmF0dHIoJ2RhdGEtbGlua2VkLXdpdGgnKSA9PT0gYXJnXHJcbiAgICB9KVxyXG59XHJcblxyXG5cclxuJCgnLmludGVyYWN0aXZlLWF2YXRhcl9fbGluaycpLmNsaWNrKGV2ZW50ID0+IHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuXHJcbiAgICBjb25zdCAkdGhpcyA9ICQoZXZlbnQuY3VycmVudFRhcmdldClcclxuICAgIGNvbnN0IHRhcmdldCA9ICR0aGlzLmF0dHIoJ2RhdGEtb3BlbicpXHJcbiAgICBjb25zdCBjdXJyZW50SXRlbSA9ICR0aGlzLmNsb3Nlc3QoJy5yZXZpZXdzX19zd2l0Y2hlci1pdGVtJylcclxuICAgIGNvbnN0IGl0ZW1Ub1Nob3cgPSBmbih0YXJnZXQpXHJcblxyXG4gICAgaXRlbVRvU2hvdy5hZGRDbGFzcygncmV2aWV3c19faXRlbS0tYWN0aXZlJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygncmV2aWV3c19faXRlbS0tYWN0aXZlJylcclxuICAgIGN1cnJlbnRJdGVtLmFkZENsYXNzKCdpbnRlcmFjdGl2ZS1hdmF0YXItLWFjdGl2ZScpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2ludGVyYWN0aXZlLWF2YXRhci0tYWN0aXZlJylcclxufSkiLCJsZXQgdmlkZW87XHJcbmxldCBkdXJhdGlvbkNvbnRyb2w7XHJcbmxldCBzb3VuZENvbnRyb2w7XHJcbmxldCBpbnRlcnZhbElkO1xyXG5sZXQgc291bmRMZXZlbDtcclxuXHJcbiQoKS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICBpbml0VmFycygpO1xyXG4gICAgaW5pdFBsYXlCdXR0b25zKCk7XHJcbiAgICBhZGRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICBkdXJhdGlvbkNvbnRyb2wubWluID0gMDtcclxuICAgIGR1cmF0aW9uQ29udHJvbC52YWx1ZSA9IDA7XHJcblxyXG4gICAgc291bmRDb250cm9sLm1pbiA9IDA7XHJcbiAgICBzb3VuZENvbnRyb2wubWF4ID0gMTA7XHJcblxyXG4gICAgc291bmRDb250cm9sLnZhbHVlID0gc291bmRDb250cm9sLm1heDtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcnMoKSB7XHJcbiAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHBsYXlTdG9wKTtcclxuXHJcbiAgICBkdXJhdGlvbkNvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZXRWaWRlb0R1cmF0aW9uKTtcclxuICAgIGR1cmF0aW9uQ29udHJvbC5hZGRFdmVudExpc3RlbmVyKCdvbm1vdXNlbW92ZScsIHNldFZpZGVvRHVyYXRpb24pO1xyXG4gICAgZHVyYXRpb25Db250cm9sLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN0b3BJbnRlcnZhbCk7XHJcbiAgICBzb3VuZENvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjaGFuZ2VTb3VuZFZvbHVtZSk7XHJcbiAgICBzb3VuZENvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcignb25tb3VzZW1vdmUnLCBjaGFuZ2VTb3VuZFZvbHVtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoYW5nZVNvdW5kVm9sdW1lKCkge1xyXG4gICAgdmlkZW8udm9sdW1lID0gc291bmRDb250cm9sLnZhbHVlIC8gMTA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0b3BJbnRlcnZhbCgpIHtcclxuICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZpZGVvRHVyYXRpb24oKSB7XHJcbiAgICB2aWRlby5jdXJyZW50VGltZSA9IGR1cmF0aW9uQ29udHJvbC52YWx1ZTtcclxuICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbCh1cGRhdGVEdXJhdGlvbiwgMTAwMCAvIDY2KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFZhcnMoKSB7XHJcbiAgICB2aWRlbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXInKTtcclxuICAgIGR1cmF0aW9uQ29udHJvbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkdXJhdGlvbkxldmVsJyk7XHJcbiAgICBzb3VuZENvbnRyb2wgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWljTGV2ZWwnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFBsYXlCdXR0b25zKCkge1xyXG4gICAgY29uc3QgcGxheUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGxheScpO1xyXG4gICAgcGxheUJ1dHRvbnMuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHBsYXlTdG9wKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG1pY0NvbnRyb2wgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWljJyk7XHJcbiAgICBtaWNDb250cm9sLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc291bmRPZik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNvdW5kT2YoKSB7XHJcbiAgICBpZiAodmlkZW8udm9sdW1lID09PSAwKXtcclxuICAgICAgICB2aWRlby52b2x1bWUgPSBzb3VuZExldmVsO1xyXG4gICAgICAgIHNvdW5kQ29udHJvbC52YWx1ZSA9IHNvdW5kTGV2ZWwgKiAxMDtcclxuICAgIH1lbHNle1xyXG4gICAgICAgIHNvdW5kTGV2ZWwgPSB2aWRlby52b2x1bWU7XHJcbiAgICAgICAgdmlkZW8udm9sdW1lID0gMDtcclxuICAgICAgICBzb3VuZENvbnRyb2wudmFsdWUgPSAwO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwbGF5U3RvcCgpIHtcclxuXHJcbiAgICAkKCcudmlkZW9fX3BsYXllci1pbWcnKS50b2dnbGVDbGFzcygndmlkZW9fX3BsYXllci1pbWctLWFjdGl2ZScpO1xyXG5cclxuICAgIGR1cmF0aW9uQ29udHJvbC5tYXggPSB2aWRlby5kdXJhdGlvbjtcclxuXHJcbiAgICBpZiAodmlkZW8ucGF1c2VkKSB7XHJcbiAgICAgICAgdmlkZW8ucGxheSgpO1xyXG4gICAgICAgIGludGVydmFsSWQgPSBzZXRJbnRlcnZhbCh1cGRhdGVEdXJhdGlvbiwgMSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZpZGVvLnBhdXNlKCk7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlRHVyYXRpb24oKSB7XHJcbiAgICBkdXJhdGlvbkNvbnRyb2wudmFsdWUgPSB2aWRlby5jdXJyZW50VGltZTtcclxufVxyXG4iXX0=
